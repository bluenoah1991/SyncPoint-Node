{"version":3,"sources":["../src/SyncPoint.js"],"names":["SyncPoint","options","undefined","needSyncNumberOfSegment","storage","syncId","httpClient","registerCallback","_respondHandle","bind","startLongPolling","startPushStream","number","segmentNumber","newSegmentNumber","payload","data","JSON","parse","toString","newNumberOfSegment","numberOfSegment","_numberOfSegment","startSync","points","needSync","resolvingReverseConflicts","anonymousPoints","dumpAnonymousPoints","localConflictsPoints","newPoints","clearAnonymousPoints","implementHandle","forEach","point","addPoints","setNumber","length","setSyncId","handle","addAnonymousPoint","addPoint","numberOfNextSegment","_numberOfNextSegment","pointsAtRange","stringify","commit","Buffer"],"mappings":"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","file":"SyncPoint.js","sourcesContent":["import _ from 'lodash';\n\nimport HttpClient from './HttpClient';\nimport WebLocalStorage from './WebLocalStorage';\n\nexport default class SyncPoint{\n    constructor(options){\n        if(options == undefined){\n            options = {};\n        }\n        this.needSyncNumberOfSegment = 0;\n        this.storage = new WebLocalStorage();\n        // Important! Serial execution\n        this.syncId = this.storage.syncId();\n        this.httpClient = new HttpClient(options);\n        this.httpClient.registerCallback(this._respondHandle.bind(this));\n        this.httpClient.startLongPolling();\n        this.httpClient.startPushStream();\n    }\n\n    _numberOfSegment(number){\n        let segmentNumber = number >> 16;\n        return segmentNumber << 16;\n    }\n\n    _numberOfNextSegment(number){\n         let newSegmentNumber = (number >> 16) + 1;\n         return newSegmentNumber << 16;\n    }   \n\n    _respondHandle(payload){\n        let data = JSON.parse(payload.toString('utf-8'));\n        let newNumberOfSegment = data['newNumberOfSegment'];\n        if(newNumberOfSegment != undefined){\n            let number = this.storage.number();\n            let numberOfSegment = this._numberOfSegment(number);\n            if(newNumberOfSegment > numberOfSegment){\n                if(!this.startSync() && this.needSyncNumberOfSegment < newNumberOfSegment){\n                    this.needSyncNumberOfSegment = newNumberOfSegment;\n                }\n            }\n        } else {\n            let syncId = data['id'];\n            let points = data['points'];\n            let numberOfSegment = data['numberOfSegment'];\n            if(syncId == undefined || points == undefined || numberOfSegment == undefined){\n                return;\n            }\n            if(syncId - this.syncId != 1){\n                return;\n            }\n            let needSync = false;\n            if(this.resolvingReverseConflicts != undefined){\n                let anonymousPoints = this.storage.dumpAnonymousPoints();\n                /*\n                 * localConflictsPoints: points - anonymousPoints\n                 * newPoints: anonymousPoints - points\n                 */\n                let [localConflictsPoints, newPoints] = \n                    this.resolvingReverseConflicts(anonymousPoints, points, numberOfSegment);\n                this.storage.clearAnonymousPoints();\n                if(this.implementHandle != undefined){\n                    _.forEach(localConflictsPoints, function(point){\n                        this.implementHandle(point['data']);\n                    }.bind(this));\n                }\n                this.storage.addPoints(points);\n                this.storage.addPoints(newPoints);\n                this.storage.setNumber(numberOfSegment);\n                if(newPoints.length > 0){\n                    needSync = true;\n                }\n            }\n            this.syncId = syncId;\n            this.storage.setSyncId(this.syncId);\n            if(needSync || this.needSyncNumberOfSegment > numberOfSegment){\n                this.startSync();\n            }\n        }\n    }\n\n    registerResolvingReverseConflicts(handle){\n        this.resolvingReverseConflicts = handle;\n    }\n\n    registerImplementHandle(handle){\n        this.implementHandle = handle;\n    }\n\n    addPoint(data){\n        if(this.syncId % 2 == 1){\n            this.storage.addAnonymousPoint({\n                'data': data\n            });\n        } else {\n            let number = this.storage.number();\n            number++;\n            this.storage.setNumber(number);\n            this.storage.addPoint({\n                'syncNumber': number,\n                'data': data\n            });\n            this.startSync();\n        }\n    }\n\n    startSync(){\n        if(this.syncId % 2 == 1){\n            return false;\n        }\n        this.storage.setSyncId(++this.syncId);\n        let number = this.storage.number();\n        let numberOfSegment = this._numberOfSegment(number);\n        let numberOfNextSegment = this._numberOfNextSegment(number);\n        let newPoints = this.storage.pointsAtRange(numberOfSegment, numberOfNextSegment);\n        let data = JSON.stringify({\n            'id': this.syncId,\n            'clientNumberOfSegment': numberOfSegment,\n            'newPoints': newPoints\n        });\n        this.httpClient.commit(new Buffer(data, 'utf-8'), 2);\n        return true;\n    }\n}"]}